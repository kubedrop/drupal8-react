{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/pages/article/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction Article({\n  post\n}) {\n  console.log(post);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 7\n    }\n  }, \"hello\");\n}\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://webserver/jsonapi/node/article');\n  const posts = await res.json();\n  console.log(posts); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.data.map(article => `/article/${article.attributes.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`http://webserver/jsonapi/node/article/${params.id}`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport default Article;","map":{"version":3,"sources":["/usr/src/app/pages/article/[id].js"],"names":["Article","post","console","log","getStaticPaths","res","fetch","posts","json","paths","data","map","article","attributes","id","fallback","getStaticProps","params","props"],"mappings":";;;;AAAA,SAASA,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA2B;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF;AAKD;;AAED,OAAO,eAAeG,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,uCAAD,CAAvB;AACA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ,EAJqC,CAKrC;;AACA,QAAME,KAAK,GAAGF,KAAK,CAACG,IAAN,CAAWC,GAAX,CAAgBC,OAAD,IAAc,YAAWA,OAAO,CAACC,UAAR,CAAmBC,EAAG,EAA9D,CAAd,CANqC,CAQrC;AACA;;AACA,SAAO;AAAEL,IAAAA,KAAF;AAASM,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AACA,QAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAE,yCAAwCW,MAAM,CAACH,EAAG,EAApD,CAAvB;AACA,QAAMb,IAAI,GAAG,MAAMI,GAAG,CAACG,IAAJ,EAAnB,CAJ+C,CAM/C;;AACA,SAAO;AAAEU,IAAAA,KAAK,EAAE;AAAEjB,MAAAA;AAAF;AAAT,GAAP;AACD;AAID,eAAeD,OAAf","sourcesContent":["function Article({ post }) {\n    console.log(post)\n    return (\n      <div>\n        hello\n      </div>\n    )\n  }\n\n  export async function getStaticPaths() {\n    // Call an external API endpoint to get posts\n    const res = await fetch('http://webserver/jsonapi/node/article')\n    const posts = await res.json()\n    console.log(posts);\n    // Get the paths we want to pre-render based on posts\n    const paths = posts.data.map((article) => `/article/${article.attributes.id}`)\n  \n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n  }\n\n  export async function getStaticProps({ params }) {\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`http://webserver/jsonapi/node/article/${params.id}`)\n    const post = await res.json()\n  \n    // Pass post data to the page via props\n    return { props: { post } }\n  }\n  \n\n  \n  export default Article"]},"metadata":{},"sourceType":"module"}