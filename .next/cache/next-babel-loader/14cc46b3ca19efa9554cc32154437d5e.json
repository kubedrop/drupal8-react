{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/pages/article/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction Article({\n  post\n}) {\n  console.log(post);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 7\n    }\n  }, post.title);\n}\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://webserver/jsonapi/node/article');\n  const {\n    data\n  } = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = data.map(article => `/article/e55b4f05-778c-42de-8405-294f70d11de7`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  console.log(params); // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n\n  const res = await fetch(`http://webserver/jsonapi/node/article/e55b4f05-778c-42de-8405-294f70d11de7`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport default Article;","map":{"version":3,"sources":["/usr/src/app/pages/article/[id].js"],"names":["Article","post","console","log","title","getStaticPaths","res","fetch","data","json","paths","map","article","fallback","getStaticProps","params","props"],"mappings":";;;;AAAA,SAASA,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA2B;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IAAI,CAACG,KADR,CADF;AAKD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,uCAAD,CAAvB;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAS,MAAMF,GAAG,CAACG,IAAJ,EAArB,CAJqC,CAOrC;;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACG,GAAL,CAAUC,OAAD,IAAc,+CAAvB,CAAd,CARqC,CAUrC;AACA;;AACA,SAAO;AAAEF,IAAAA,KAAF;AAASG,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/Cb,EAAAA,OAAO,CAACC,GAAR,CAAYY,MAAZ,EAD+C,CAE/C;AACA;;AACA,QAAMT,GAAG,GAAG,MAAMC,KAAK,CAAE,4EAAF,CAAvB;AACA,QAAMN,IAAI,GAAG,MAAMK,GAAG,CAACG,IAAJ,EAAnB,CAL+C,CAO/C;;AACA,SAAO;AAAEO,IAAAA,KAAK,EAAE;AAAEf,MAAAA;AAAF;AAAT,GAAP;AACD;AAID,eAAeD,OAAf","sourcesContent":["function Article({ post }) {\n    console.log(post)\n    return (\n      <div>\n        {post.title}\n      </div>\n    )\n  }\n\n  export async function getStaticPaths() {\n    // Call an external API endpoint to get posts\n    const res = await fetch('http://webserver/jsonapi/node/article')\n\n    const {data} = await res.json()\n    \n   \n    // Get the paths we want to pre-render based on posts\n    const paths = data.map((article) => `/article/e55b4f05-778c-42de-8405-294f70d11de7`)\n  \n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n  }\n\n  export async function getStaticProps({ params }) {\n    console.log(params);\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`http://webserver/jsonapi/node/article/e55b4f05-778c-42de-8405-294f70d11de7`)\n    const post = await res.json()\n  \n    // Pass post data to the page via props\n    return { props: { post } }\n  }\n  \n\n  \n  export default Article"]},"metadata":{},"sourceType":"module"}