{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/pages/article/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction Article({\n  post\n}) {\n  console.log(post);\n  return __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 7\n    }\n  }, posts.map(post => __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 11\n    }\n  }, post.title)));\n}\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://webserver/jsonapi/node/article');\n  const {\n    data\n  } = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = data.map(article => `/article/${article.attributes.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  console.log(params); // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n\n  const res = await fetch(`http://webserver/jsonapi/node/article/${params.id}`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport default Article;","map":{"version":3,"sources":["/usr/src/app/pages/article/[id].js"],"names":["Article","post","console","log","posts","map","title","getStaticPaths","res","fetch","data","json","paths","article","attributes","id","fallback","getStaticProps","params","props"],"mappings":";;;;AAAA,SAASA,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA2B;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,KAAK,CAACC,GAAN,CAAWJ,IAAD,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACK,KAAV,CADD,CADH,CADF;AAOD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,uCAAD,CAAvB;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAS,MAAMF,GAAG,CAACG,IAAJ,EAArB,CAJqC,CAOrC;;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACL,GAAL,CAAUQ,OAAD,IAAc,YAAWA,OAAO,CAACC,UAAR,CAAmBC,EAAG,EAAxD,CAAd,CARqC,CAUrC;AACA;;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASI,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/ChB,EAAAA,OAAO,CAACC,GAAR,CAAYe,MAAZ,EAD+C,CAE/C;AACA;;AACA,QAAMV,GAAG,GAAG,MAAMC,KAAK,CAAE,yCAAwCS,MAAM,CAACH,EAAG,EAApD,CAAvB;AACA,QAAMd,IAAI,GAAG,MAAMO,GAAG,CAACG,IAAJ,EAAnB,CAL+C,CAO/C;;AACA,SAAO;AAAEQ,IAAAA,KAAK,EAAE;AAAElB,MAAAA;AAAF;AAAT,GAAP;AACD;AAID,eAAeD,OAAf","sourcesContent":["function Article({ post }) {\n    console.log(post)\n    return (\n      <ul>\n        {posts.map((post) => (\n          <li>{post.title}</li>\n        ))}\n      </ul>\n    )\n  }\n\n  export async function getStaticPaths() {\n    // Call an external API endpoint to get posts\n    const res = await fetch('http://webserver/jsonapi/node/article')\n\n    const {data} = await res.json()\n    \n   \n    // Get the paths we want to pre-render based on posts\n    const paths = data.map((article) => `/article/${article.attributes.id}`)\n  \n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n  }\n\n  export async function getStaticProps({ params }) {\n    console.log(params);\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`http://webserver/jsonapi/node/article/${params.id}`)\n    const post = await res.json()\n  \n    // Pass post data to the page via props\n    return { props: { post } }\n  }\n  \n\n  \n  export default Article"]},"metadata":{},"sourceType":"module"}